package captureamoment

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// Comment represents a row from 'captureamoment.comment'.
type Comment struct {
	CommentID   int            `json:"CommentID"`   // CommentID
	CommentText sql.NullString `json:"CommentText"` // CommentText
	Liked       sql.NullInt64  `json:"Liked"`       // Liked
	UserID      int            `json:"UserID"`      // UserID
	PostID      int            `json:"PostID"`      // PostID
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Comment exists in the database.
func (c *Comment) Exists() bool {
	return c._exists
}

// Deleted returns true when the Comment has been marked for deletion from
// the database.
func (c *Comment) Deleted() bool {
	return c._deleted
}

// Insert inserts the Comment to the database.
func (c *Comment) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO captureamoment.comment (` +
		`CommentID, CommentText, Liked, UserID, PostID` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, c.CommentID, c.CommentText, c.Liked, c.UserID, c.PostID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CommentID, c.CommentText, c.Liked, c.UserID, c.PostID); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a Comment in the database.
func (c *Comment) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE captureamoment.comment SET ` +
		`CommentText = ?, Liked = ?, UserID = ?, PostID = ? ` +
		`WHERE CommentID = ?`
	// run
	logf(sqlstr, c.CommentText, c.Liked, c.UserID, c.PostID, c.CommentID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CommentText, c.Liked, c.UserID, c.PostID, c.CommentID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Comment to the database.
func (c *Comment) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for Comment.
func (c *Comment) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO captureamoment.comment (` +
		`CommentID, CommentText, Liked, UserID, PostID` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`CommentID = VALUES(CommentID), CommentText = VALUES(CommentText), Liked = VALUES(Liked), UserID = VALUES(UserID), PostID = VALUES(PostID)`
	// run
	logf(sqlstr, c.CommentID, c.CommentText, c.Liked, c.UserID, c.PostID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CommentID, c.CommentText, c.Liked, c.UserID, c.PostID); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the Comment from the database.
func (c *Comment) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM captureamoment.comment ` +
		`WHERE CommentID = ?`
	// run
	logf(sqlstr, c.CommentID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CommentID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CommentByPostID retrieves a row from 'captureamoment.comment' as a Comment.
//
// Generated from index 'PostID_idx'.
func CommentByPostID(ctx context.Context, db DB, postID int) ([]*Comment, error) {
	// query
	const sqlstr = `SELECT ` +
		`CommentID, CommentText, Liked, UserID, PostID ` +
		`FROM captureamoment.comment ` +
		`WHERE PostID = ?`
	// run
	logf(sqlstr, postID)
	rows, err := db.QueryContext(ctx, sqlstr, postID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Comment
	for rows.Next() {
		c := Comment{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.CommentID, &c.CommentText, &c.Liked, &c.UserID, &c.PostID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// CommentByUserID retrieves a row from 'captureamoment.comment' as a Comment.
//
// Generated from index 'UserID_idx'.
func CommentByUserID(ctx context.Context, db DB, userID int) ([]*Comment, error) {
	// query
	const sqlstr = `SELECT ` +
		`CommentID, CommentText, Liked, UserID, PostID ` +
		`FROM captureamoment.comment ` +
		`WHERE UserID = ?`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Comment
	for rows.Next() {
		c := Comment{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.CommentID, &c.CommentText, &c.Liked, &c.UserID, &c.PostID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// CommentByCommentID retrieves a row from 'captureamoment.comment' as a Comment.
//
// Generated from index 'comment_CommentID_pkey'.
func CommentByCommentID(ctx context.Context, db DB, commentID int) (*Comment, error) {
	// query
	const sqlstr = `SELECT ` +
		`CommentID, CommentText, Liked, UserID, PostID ` +
		`FROM captureamoment.comment ` +
		`WHERE CommentID = ?`
	// run
	logf(sqlstr, commentID)
	c := Comment{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, commentID).Scan(&c.CommentID, &c.CommentText, &c.Liked, &c.UserID, &c.PostID); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// Post returns the Post associated with the Comment's (PostID).
//
// Generated from foreign key 'PostID'.
func (c *Comment) Post(ctx context.Context, db DB) (*Post, error) {
	return PostByPostID(ctx, db, c.PostID)
}

// User returns the User associated with the Comment's (UserID).
//
// Generated from foreign key 'UserID'.
func (c *Comment) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, c.UserID)
}
