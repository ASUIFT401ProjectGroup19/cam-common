package captureamoment

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Post represents a row from 'captureamoment.post'.
type Post struct {
	PostID      int            `json:"PostID"`      // PostID
	Description sql.NullString `json:"Description"` // Description
	Date        time.Time      `json:"Date"`        // Date
	UserID      int            `json:"UserID"`      // UserID
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Post exists in the database.
func (p *Post) Exists() bool {
	return p._exists
}

// Deleted returns true when the Post has been marked for deletion from
// the database.
func (p *Post) Deleted() bool {
	return p._deleted
}

// Insert inserts the Post to the database.
func (p *Post) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO captureamoment.post (` +
		`Description, Date, UserID` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`
	// run
	logf(sqlstr, p.Description, p.Date, p.UserID)
	res, err := db.ExecContext(ctx, sqlstr, p.Description, p.Date, p.UserID)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	p.PostID = int(id)
	// set exists
	p._exists = true
	return nil
}

// Update updates a Post in the database.
func (p *Post) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE captureamoment.post SET ` +
		`Description = ?, Date = ?, UserID = ? ` +
		`WHERE PostID = ?`
	// run
	logf(sqlstr, p.Description, p.Date, p.UserID, p.PostID)
	if _, err := db.ExecContext(ctx, sqlstr, p.Description, p.Date, p.UserID, p.PostID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Post to the database.
func (p *Post) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for Post.
func (p *Post) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO captureamoment.post (` +
		`PostID, Description, Date, UserID` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`Description = VALUES(Description), Date = VALUES(Date), UserID = VALUES(UserID)`
	// run
	logf(sqlstr, p.PostID, p.Description, p.Date, p.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, p.PostID, p.Description, p.Date, p.UserID); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the Post from the database.
func (p *Post) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM captureamoment.post ` +
		`WHERE PostID = ?`
	// run
	logf(sqlstr, p.PostID)
	if _, err := db.ExecContext(ctx, sqlstr, p.PostID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PostByUserID retrieves a row from 'captureamoment.post' as a Post.
//
// Generated from index 'UserID_idx'.
func PostByUserID(ctx context.Context, db DB, userID int) ([]*Post, error) {
	// query
	const sqlstr = `SELECT ` +
		`PostID, Description, Date, UserID ` +
		`FROM captureamoment.post ` +
		`WHERE UserID = ?`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Post
	for rows.Next() {
		p := Post{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&p.PostID, &p.Description, &p.Date, &p.UserID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PostByPostID retrieves a row from 'captureamoment.post' as a Post.
//
// Generated from index 'post_PostID_pkey'.
func PostByPostID(ctx context.Context, db DB, postID int) (*Post, error) {
	// query
	const sqlstr = `SELECT ` +
		`PostID, Description, Date, UserID ` +
		`FROM captureamoment.post ` +
		`WHERE PostID = ?`
	// run
	logf(sqlstr, postID)
	p := Post{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, postID).Scan(&p.PostID, &p.Description, &p.Date, &p.UserID); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// User returns the User associated with the Post's (UserID).
//
// Generated from foreign key 'post_UserID_fk'.
func (p *Post) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, p.UserID)
}
