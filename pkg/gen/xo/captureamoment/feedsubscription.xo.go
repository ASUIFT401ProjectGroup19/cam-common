package captureamoment

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// Feedsubscription represents a row from 'captureamoment.feedsubscription'.
type Feedsubscription struct {
	SubscriptionID int `json:"SubscriptionID"` // SubscriptionID
	UserID         int `json:"UserID"`         // UserID
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Feedsubscription exists in the database.
func (f *Feedsubscription) Exists() bool {
	return f._exists
}

// Deleted returns true when the Feedsubscription has been marked for deletion from
// the database.
func (f *Feedsubscription) Deleted() bool {
	return f._deleted
}

// Insert inserts the Feedsubscription to the database.
func (f *Feedsubscription) Insert(ctx context.Context, db DB) error {
	switch {
	case f._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case f._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO captureamoment.feedsubscription (` +
		`UserID` +
		`) VALUES (` +
		`?` +
		`)`
	// run
	logf(sqlstr, f.UserID)
	res, err := db.ExecContext(ctx, sqlstr, f.UserID)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	f.SubscriptionID = int(id)
	// set exists
	f._exists = true
	return nil
}

// Update updates a Feedsubscription in the database.
func (f *Feedsubscription) Update(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case f._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE captureamoment.feedsubscription SET ` +
		`UserID = ? ` +
		`WHERE SubscriptionID = ?`
	// run
	logf(sqlstr, f.UserID, f.SubscriptionID)
	if _, err := db.ExecContext(ctx, sqlstr, f.UserID, f.SubscriptionID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Feedsubscription to the database.
func (f *Feedsubscription) Save(ctx context.Context, db DB) error {
	if f.Exists() {
		return f.Update(ctx, db)
	}
	return f.Insert(ctx, db)
}

// Upsert performs an upsert for Feedsubscription.
func (f *Feedsubscription) Upsert(ctx context.Context, db DB) error {
	switch {
	case f._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO captureamoment.feedsubscription (` +
		`SubscriptionID, UserID` +
		`) VALUES (` +
		`?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`UserID = VALUES(UserID)`
	// run
	logf(sqlstr, f.SubscriptionID, f.UserID)
	if _, err := db.ExecContext(ctx, sqlstr, f.SubscriptionID, f.UserID); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Delete deletes the Feedsubscription from the database.
func (f *Feedsubscription) Delete(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return nil
	case f._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM captureamoment.feedsubscription ` +
		`WHERE SubscriptionID = ?`
	// run
	logf(sqlstr, f.SubscriptionID)
	if _, err := db.ExecContext(ctx, sqlstr, f.SubscriptionID); err != nil {
		return logerror(err)
	}
	// set deleted
	f._deleted = true
	return nil
}

// FeedsubscriptionByUserID retrieves a row from 'captureamoment.feedsubscription' as a Feedsubscription.
//
// Generated from index 'UserID_idx'.
func FeedsubscriptionByUserID(ctx context.Context, db DB, userID int) ([]*Feedsubscription, error) {
	// query
	const sqlstr = `SELECT ` +
		`SubscriptionID, UserID ` +
		`FROM captureamoment.feedsubscription ` +
		`WHERE UserID = ?`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Feedsubscription
	for rows.Next() {
		f := Feedsubscription{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&f.SubscriptionID, &f.UserID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &f)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// FeedsubscriptionBySubscriptionID retrieves a row from 'captureamoment.feedsubscription' as a Feedsubscription.
//
// Generated from index 'feedsubscription_SubscriptionID_pkey'.
func FeedsubscriptionBySubscriptionID(ctx context.Context, db DB, subscriptionID int) (*Feedsubscription, error) {
	// query
	const sqlstr = `SELECT ` +
		`SubscriptionID, UserID ` +
		`FROM captureamoment.feedsubscription ` +
		`WHERE SubscriptionID = ?`
	// run
	logf(sqlstr, subscriptionID)
	f := Feedsubscription{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, subscriptionID).Scan(&f.SubscriptionID, &f.UserID); err != nil {
		return nil, logerror(err)
	}
	return &f, nil
}

// User returns the User associated with the Feedsubscription's (UserID).
//
// Generated from foreign key 'User'.
func (f *Feedsubscription) User(ctx context.Context, db DB) (*User, error) {
	return UserByUserID(ctx, db, f.UserID)
}
