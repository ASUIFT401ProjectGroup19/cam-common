// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: feed/v1/api.proto

package feedv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FeedRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedRequestMultiError, or
// nil if none found.
func (m *FeedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for BatchSize

	if len(errors) > 0 {
		return FeedRequestMultiError(errors)
	}
	return nil
}

// FeedRequestMultiError is an error wrapping multiple validation errors
// returned by FeedRequest.ValidateAll() if the designated constraints aren't met.
type FeedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedRequestMultiError) AllErrors() []error { return m }

// FeedRequestValidationError is the validation error returned by
// FeedRequest.Validate if the designated constraints aren't met.
type FeedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedRequestValidationError) ErrorName() string { return "FeedRequestValidationError" }

// Error satisfies the builtin error interface
func (e FeedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedRequestValidationError{}

// Validate checks the field values on FeedResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeedResponseMultiError, or
// nil if none found.
func (m *FeedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedResponseValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FeedResponseMultiError(errors)
	}
	return nil
}

// FeedResponseMultiError is an error wrapping multiple validation errors
// returned by FeedResponse.ValidateAll() if the designated constraints aren't met.
type FeedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedResponseMultiError) AllErrors() []error { return m }

// FeedResponseValidationError is the validation error returned by
// FeedResponse.Validate if the designated constraints aren't met.
type FeedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedResponseValidationError) ErrorName() string { return "FeedResponseValidationError" }

// Error satisfies the builtin error interface
func (e FeedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedResponseValidationError{}

// Validate checks the field values on AllRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllRequestMultiError, or
// nil if none found.
func (m *AllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for BatchSize

	if len(errors) > 0 {
		return AllRequestMultiError(errors)
	}
	return nil
}

// AllRequestMultiError is an error wrapping multiple validation errors
// returned by AllRequest.ValidateAll() if the designated constraints aren't met.
type AllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllRequestMultiError) AllErrors() []error { return m }

// AllRequestValidationError is the validation error returned by
// AllRequest.Validate if the designated constraints aren't met.
type AllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllRequestValidationError) ErrorName() string { return "AllRequestValidationError" }

// Error satisfies the builtin error interface
func (e AllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllRequestValidationError{}

// Validate checks the field values on AllResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllResponseMultiError, or
// nil if none found.
func (m *AllResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AllResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllResponseValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllResponseValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllResponseMultiError(errors)
	}
	return nil
}

// AllResponseMultiError is an error wrapping multiple validation errors
// returned by AllResponse.ValidateAll() if the designated constraints aren't met.
type AllResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllResponseMultiError) AllErrors() []error { return m }

// AllResponseValidationError is the validation error returned by
// AllResponse.Validate if the designated constraints aren't met.
type AllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllResponseValidationError) ErrorName() string { return "AllResponseValidationError" }

// Error satisfies the builtin error interface
func (e AllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllResponseValidationError{}
